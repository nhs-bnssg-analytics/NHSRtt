[{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/articles/animated-charts.html","id":"create-the-input-data","dir":"Articles","previous_headings":"","what":"Create the input data","title":"Visualising projections","text":"data used dummy data. calibration period two years, forecast period also two years. Validation performed purpose vignette simply show create animations.","code":"max_months_waited <- 12 calibration_periods <- 24 seed <- 599"},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/articles/animated-charts.html","id":"calibration","dir":"Articles","previous_headings":"Create the input data","what":"Calibration","title":"Visualising projections","text":"calibration data created passed calibrate_capacity_renege_params() function.","code":"referrals <- create_dummy_data(   type = \"referral\",   max_months_waited = max_months_waited,   number_periods = calibration_periods,   referral_values = 500:600,   seed = seed )   incompletes <- create_dummy_data(   type = \"incomplete\",   max_months_waited = max_months_waited,   number_periods = calibration_periods,   max_incompletes = 500,   seed = seed )  completes <- create_dummy_data(   type = \"complete\",   max_months_waited = max_months_waited,   number_periods = calibration_periods,   max_treatments = 20,   seed = seed )  params <- calibrate_capacity_renege_params(   referrals = referrals,   incompletes = incompletes,   completes = completes,   max_months_waited = max_months_waited,   redistribute_m0_reneges = TRUE )"},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/articles/animated-charts.html","id":"projections---input-data","dir":"Articles","previous_headings":"Create the input data","what":"Projections - input data","title":"Visualising projections","text":"projecting, good variety projections representing less severe scenarios. One way projecting using time series method, ARIMA TBATS. show use TBATS, along uncertainty provided function. simplicity, calibration data re-used projection data. inputs function 24 months referrals, 24 months treatments (completed pathways) incomplete pathways 1 time period. creates table looks like (top 15 rows displayed). table contains uncertainty projections. repeated number treatments incomplete pathways. inputs can turned scenarios. severe scenarios higher incomplete pathways higher referrals combined lower completed pathways. less severe scenarios opposite.","code":"timesteps <- 24  # this function helps with repeated data manipulation; it contains the ts # function (which turns the data into a time series - where the 12 indicates # that is it a monthly time series), and also the tbats function, which performs # the time series analysis on the time series forecast_function <- function(rtt_table, number_timesteps) {   fcast <- rtt_table |>      pull(value) |>      ts(frequency = 12) |>      forecast::tbats() |>      forecast::forecast(h = number_timesteps) |>      tidyr::as_tibble()      return(fcast) }  projection_referrals <- referrals |>    rename(     value = referrals   ) |>    forecast_function(     number_timesteps = timesteps   ) |>    mutate(     type = \"Referrals\"   ) projection_complete <- completes |>    summarise(     value = sum(treatments),     .by = period_id   ) |>    forecast_function(     number_timesteps = timesteps   ) |>    mutate(     type = \"Treatments\"   )  projection_incomplete <- incompletes |>    rename(     value = incompletes   ) |>    group_by(months_waited_id) |>    group_split() |>    lapply(     forecast_function,     number_timesteps = 1   ) |>    setNames(nm = 0:12) |>    bind_rows(.id = \"months_waited_id\") |>    mutate(     months_waited_id = as.numeric(months_waited_id)   ) # most severe (severe_1)  severe_1_referrals <- projection_referrals |>    pull(`Hi 95`)  severe_1_treatments <- projection_complete |>    pull(`Lo 95`)  severe_1_incomplete <- projection_incomplete |>    select(     \"months_waited_id\",     incompletes = \"Hi 95\"   )  # 2nd most severe (severe_2)  severe_2_referrals <- projection_referrals |>    pull(`Hi 80`)  severe_2_treatments <- projection_complete |>    pull(`Lo 80`)  severe_2_incomplete <- projection_incomplete |>    select(     \"months_waited_id\",     incompletes = \"Hi 80\"   )  # average  average_referrals <- projection_referrals |>    pull(`Point Forecast`)  average_treatments <- projection_complete |>    pull(`Point Forecast`)  average_incomplete <- projection_incomplete |>    select(     \"months_waited_id\",     incompletes = \"Point Forecast\"   )   # 2nd mildest (mild_2)  mild_2_referrals <- projection_referrals |>    pull(`Lo 80`)  mild_2_treatments <- projection_complete |>    pull(`Hi 80`)  mild_2_incomplete <- projection_incomplete |>    select(     \"months_waited_id\",     incompletes = \"Lo 80\"   )  # Mildest (mild_1)  mild_1_referrals <- projection_referrals |>    pull(`Lo 95`)  mild_1_treatments <- projection_complete |>    pull(`Hi 95`)  mild_1_incomplete <- projection_incomplete |>    select(     \"months_waited_id\",     incompletes = \"Lo 95\"   )"},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/articles/animated-charts.html","id":"projections---forecasts","dir":"Articles","previous_headings":"Create the input data","what":"Projections - forecasts","title":"Visualising projections","text":"inputs passed apply_params_to_projections() function.","code":"severe_1_projections <- apply_params_to_projections(   capacity_projections = severe_1_treatments,   referrals_projections = severe_1_referrals,   incomplete_pathways = severe_1_incomplete,   renege_capacity_params = params,   max_months_waited = max_months_waited ) |>    mutate(     scenario = \"Most severe\"   )  severe_2_projections <- apply_params_to_projections(   capacity_projections = severe_2_treatments,   referrals_projections = severe_2_referrals,   incomplete_pathways = severe_2_incomplete,   renege_capacity_params = params,   max_months_waited = max_months_waited ) |>    mutate(     scenario = \"2nd most severe\"   )  average_projections <- apply_params_to_projections(   capacity_projections = average_treatments,   referrals_projections = average_referrals,   incomplete_pathways = average_incomplete,   renege_capacity_params = params,   max_months_waited = max_months_waited ) |>    mutate(     scenario = \"Average\"   )  mild_2_projections <- apply_params_to_projections(   capacity_projections = mild_2_treatments,   referrals_projections = mild_2_referrals,   incomplete_pathways = mild_2_incomplete,   renege_capacity_params = params,   max_months_waited = max_months_waited ) |>    mutate(     scenario = \"2nd mildest\"   )  mild_1_projections <- apply_params_to_projections(   capacity_projections = mild_1_treatments,   referrals_projections = mild_1_referrals,   incomplete_pathways = mild_1_incomplete,   renege_capacity_params = params,   max_months_waited = max_months_waited ) |>    mutate(     scenario = \"Mildest\"   )"},{"path":[]},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/articles/animated-charts.html","id":"inputs","dir":"Articles","previous_headings":"Visualisations","what":"Inputs","title":"Visualising projections","text":"Stakeholders often interested inputs understand outputs better. sections give useful code styling data used bespoke analysis.","code":"pal_bands <- c(   'Middle' = '#6baed6',   'Inner' = '#08519c',   'Median' = '#FFFFFF' )       bind_rows(   projection_complete,   projection_referrals ) |>    mutate(     period_id = row_number(),     .by = type   ) |>    ggplot(     aes(x = period_id)   ) +   geom_ribbon(     aes(       ymin = `Lo 80`,        ymax = `Hi 80`,        fill = 'Middle'     ),      alpha = 0.6   ) +   geom_ribbon(     aes(       ymin = `Lo 95`,        ymax = `Hi 95`,        fill = 'Inner'     ),      alpha = 0.6   ) +   geom_ribbon(     aes(       ymin = `Point Forecast`,        ymax = `Point Forecast`,        fill = 'Median'     ),      color = 'black',    alpha = 0.6   ) +   geom_line(     aes(       y = `Point Forecast`,       group = type     ),      color = 'white',      linewidth = 1   ) +   theme_bw() +   theme(plot.title = element_text(hjust = 0.5)) +   facet_wrap(     facets = vars(type),     scales = \"free_y\"   ) +   labs(     title = \"Input range of completes pathways and referrals by period\",      x = \"Period\",      y = \"Volume\"   ) +   scale_fill_manual(     name = \"Interval\",      breaks = c('Middle', 'Inner', 'Median'),     values = pal_bands,      labels = c(       'Middle' = '10% to 90%',        'Inner' = '2.5% to 97.5%',        'Median' = 'Median'     )   )"},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/articles/animated-charts.html","id":"static-projections","dir":"Articles","previous_headings":"","what":"Static projections","title":"Visualising projections","text":"similar set charts can made waiting list projections.","code":"bind_rows(   mild_1_projections,   mild_2_projections,   average_projections,   severe_2_projections,   severe_1_projections ) |>    select(     \"period_id\", \"months_waited_id\", \"incompletes\", \"scenario\"   ) |>    pivot_wider(     names_from = scenario,     values_from = incompletes   ) |>    rename(     \"Lo 80\" = \"Mildest\",     \"Lo 95\" = \"2nd mildest\",     \"Median\" = \"Average\",     \"Hi 95\" = \"2nd most severe\",     \"Hi 80\" = \"Most severe\"   ) |>    mutate(     months_waited_id = paste(       months_waited_id,       \"months waited\"     ),     months_waited_id = factor(       months_waited_id,       levels = paste(0:12, \"months waited\")     )   ) |>    ggplot(     aes(x = period_id)   ) +   geom_ribbon(     aes(       ymin = `Lo 80`,        ymax = `Hi 80`,        fill = 'Middle'     ),      alpha = 0.6   ) +   geom_ribbon(     aes(       ymin = `Lo 95`,        ymax = `Hi 95`,        fill = 'Inner'     ),      alpha = 0.6   ) +   geom_ribbon(     aes(       ymin = `Median`,        ymax = `Median`,        fill = 'Median'     ),      color = 'black',    alpha = 0.6   ) +   geom_line(     aes(       y = `Median`,       group = months_waited_id     ),      color = 'white',      linewidth = 1   ) +   theme_bw() +   theme(plot.title = element_text(hjust = 0.5)) +   facet_wrap(     facets = vars(months_waited_id),     scales = \"free_y\"   ) +   labs(     title = \"Incomplete pathways by wait time\",      x = \"Period\",      y = \"Volume\"   ) +   scale_fill_manual(     name = \"Interval\",      breaks = c('Middle', 'Inner', 'Median'),     values = pal_bands,      labels = c(       'Middle' = '10% to 90%',        'Inner' = '2.5% to 97.5%',        'Median' = 'Median'     )   )"},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/articles/animated-charts.html","id":"animated-projections","dir":"Articles","previous_headings":"","what":"Animated projections","title":"Visualising projections","text":"can also displayed rolling animation.","code":"bind_rows(   mild_1_projections,   mild_2_projections,   average_projections,   severe_2_projections,   severe_1_projections ) |>    select(     \"period_id\", \"months_waited_id\", \"incompletes\", \"scenario\"   ) |>    mutate(     scenario = factor(       scenario,       levels = c(         \"Mildest\",         \"2nd mildest\",         \"Average\",         \"2nd most severe\",         \"Most severe\"       )     ),     period_id = as.integer(period_id)   ) |>    ggplot(     aes(       x = months_waited_id,       y = incompletes     )   ) +   geom_col(     aes(       group = period_id     ),     fill = \"#08519c\"   ) +   theme_bw() +   theme(plot.title = element_text(hjust = 0.5)) +   labs(     title = \"Incomplete pathways by number of months waited: period {frame_time}\",     x = \"Number of months waited\",     y = \"Number of incompete pathways\"   ) +   facet_wrap(     facets = vars(scenario)   ) +   transition_time(     period_id   )"},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/articles/rtt-pipeline.html","id":"aims","dir":"Articles","previous_headings":"","what":"Aims","title":"Creating and validating a model","text":"aim exercise vignette , selected acute trust, predict future activity, hence waiting times, elective activity trust. done developing model parameters, based stock--flow approach time period (called calibration period). parameters calculated publicly available data, counts incomplete pathways, completed pathways new referrals time step. completed incomplete pathways broken number months individuals pathways waiting. parameters applied subsequent time period (called validation period). parameters used generate estimated incomplete activity period. activity compared observed activity evaluate modelling. final part apply model parameters future scenarios predict future waiting times.","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/articles/rtt-pipeline.html","id":"setting-up-the-data","dir":"Articles","previous_headings":"","what":"Setting up the data","title":"Creating and validating a model","text":"Conceptually, want use year data calibrate parameters, following six months validate parameters. use parameters predict year following valdiation period.  public data (source) can sourced get_rtt_data() function. data interested website pathways admitted non-admitted (considered completed pathways), incomplete (people still waiting admitted), new RTT periods (new referrals entering referral treatment pathway). data provided trust_parent_org_code, commissioner_parent_org_code, commissioner_org_code, trust specialty, can aggregated depending analysis interest. first 15 rows data monthly_rtt object looks like comes get_rtt_data() function (may change run different date data update monthly live website): Example data set following download NHS website. purposes vignette, performing analysis activity (rather specialty), aggregate data (selected trust multiple records assigned different commissioners, commissioner parent trust parent) splitting later three datasets. data manipulation takes five steps: change “type” column “Complete”, “Incomplete” “Referrals” convert months_waited string id using convert_months_waited_to_id() function aggregate counts specialty one overall figure create “period_id” numeric field sequential months dataset Example records monthly_rtt object. data need specific format (described function documentation) functions work. calculate renege capacity parameters, inputs needs : Referrals per time step (inputs time step), referrals waited 0 months Complete pathways per time step number months waited Incomplete pathways per time step number months waited , split data three objects (completes, incompletes referrals) Example referrals data set. Example completes data set. Example completes data set.","code":"calibration_start <- as.Date(\"2023-05-01\") calibration_end <- as.Date(\"2024-04-30\") validation_start <- calibration_end + 1 validation_end <- as.Date(\"2024-10-31\") prediction_start <- validation_end + 1 prediction_end <- as.Date(\"2025-10-31\") analysis_trust <- \"RC9\" # filter for a single trust max_months_waited <- 12 # I am only interested in waiting time bins up to 12 months monthly_rtt <- NHSRtt::get_rtt_data(   date_start = calibration_start,   date_end = validation_end,   trust_codes = analysis_trust, # the trust we are interested in   show_progress = FALSE # can change this to TRUE to see progress ) monthly_rtt <- monthly_rtt |>    mutate(     months_waited_id = convert_months_waited_to_id(       months_waited,       max_months_waited     )   ) |>   summarise(     value = sum(value),     .by = c(       trust,       period,       type,       months_waited_id     )   ) |>    arrange(     type,     months_waited_id,     period   ) |>    mutate(     period_id = dplyr::row_number(), # we need period_id for later steps     .by = c(       type,       months_waited_id     )   ) calibration_period <- monthly_rtt |>   filter(     between(       period,       calibration_start,       calibration_end     )   ) |>   summarise(     value = sum(value),     .by = c(       trust,       period_id,       type,       months_waited_id     )   ) |>   dplyr::select(     trust,     period_id,     type,     months_waited_id,     value   )  referrals <- calibration_period |>   filter(     type == \"Referrals\"   ) |>   distinct(     period_id,     value   ) |>   rename(     referrals = \"value\"   ) completes <- calibration_period |>   filter(     type == \"Complete\"   ) |>   distinct(     period_id,     months_waited_id,     value   ) |>   rename(     treatments = \"value\"   ) incompletes <- calibration_period |>   filter(     type == \"Incomplete\"   ) |>   distinct(     period_id,     months_waited_id,     value   ) |>   rename(     incompletes = \"value\"   )"},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/articles/rtt-pipeline.html","id":"generating-the-model-parameters","dir":"Articles","previous_headings":"","what":"Generating the model parameters","title":"Creating and validating a model","text":"inputs passed calibrate_capacity_renege_params() function. occasions renege counts negative group people waiting 0 months, can tell modelling assume -reported referrals redistribute referrals. done setting redistribute_m0_reneges TRUE. structure output calibrate_capacity_renege_params() function. renege parameter ratio mean number patients renege stock compared mean number entering stock months waited calibration period. capacity parameter renege parameter, comparing mean pathways completed mean count individuals entering stock.","code":"params <- calibrate_capacity_renege_params(   referrals = referrals,   completes = completes,   incompletes = incompletes,   max_months_waited = max_months_waited,   # if negative reneges are calculated in the first waiting bin, these are   # reassigned as referrals when redistribute_m0_reneges value is TRUE (though   # we must make sure that referrals passed to the projection period are   # uplifted in the same way for consistency)   redistribute_m0_reneges = FALSE,    # full_breakdown can be set to TRUE to see all the transitions for all months   # waited at each time step   full_breakdown = FALSE  ) #> Warning in calibrate_capacity_renege_params(referrals = referrals, completes = #> completes, : negative renege parameters present, investigate raw data"},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/articles/rtt-pipeline.html","id":"validate-these-parameters-on-a-known-time-series","dir":"Articles","previous_headings":"","what":"Validate these parameters on a known time series","title":"Creating and validating a model","text":"Pass parameters known timeseries, calculate evaluation metric, comparing predicted count incomplete pathways known count incomplete pathways. example calculates mean absolute percentage error (MAPE). First, data needs constructing. data required : vector capacity per time step vector referrals per time step table counts incomplete pathways months waiting time step prior first time step two data inputs create data take full dataset created earlier filter validation time period. Example structure incomplete pathways t=0 gets passed apply_params_to_projections() function. data passed apply_params_to_projections() provides full table stocks time step. Example outputs apply_params_to_projections() function. mean absolute percentage error (mape) can calculated . mean absolute error (mae) can also calculated: mean absolute percentage error modelled parameters 5.4% mean absolute error 766.6.","code":"validation_period <- monthly_rtt |>   filter(     between(       period,       validation_start %m-% months(1), # this helps the user pick up the incompletes from the previous month       validation_end     )   ) |>   dplyr::select(     trust,     period_id,     type,     months_waited_id,     value   )  validation_referrals <- validation_period |>   filter(     type == \"Referrals\",     period_id != min(period_id)   ) |>   distinct(     period_id,     value   ) |>   arrange(     period_id   ) |>    pull(     value   )  print(validation_referrals) #> [1] 37566 39590 41640 35752 37910 39896  validation_capacity <- validation_period |>   filter(     type == \"Complete\",     period_id != min(period_id)   ) |>    summarise(     count = sum(value),     .by = period_id   ) |>   arrange(     period_id   ) |>    pull(     count   )  print(validation_capacity) #> [1] 21484 21824 22232 21306 22520 23008  incompletes_at_t0 <- validation_period |>   filter(     type == \"Incomplete\",     period_id == min(period_id)   ) |>   distinct(     months_waited_id,     value   ) |>   rename(     incompletes = \"value\"   ) validation_performance <- apply_params_to_projections(   capacity_projections = validation_capacity,   referrals_projections = validation_referrals,   incomplete_pathways = incompletes_at_t0,   renege_capacity_params = params,   max_months_waited = max_months_waited ) # calculate mean absolute percentage error # 1. calculate observed incompletes by months waited and period observed_incompletes <- validation_period |>    filter(     type == \"Incomplete\",     period_id != min(period_id)   ) |>    summarise(     observed = sum(value),     .by = c(       period_id, months_waited_id     )   )  |>    mutate(     period_id = period_id - min(period_id) + 1 # to change the period_ids to the same scale as the ones calculated   )  # 2. quantify observed incompletes by months waited and period estimated_incompletes <- validation_performance |>    dplyr::select(     \"period_id\",      \"months_waited_id\",     predicted = \"incompletes\"   )  # 3. calculate mape mape <- observed_incompletes |>    left_join(     estimated_incompletes,     by = join_by(       period_id, months_waited_id     )   ) |>    mutate(     absolute_percentage_error = abs(       (predicted - observed) / observed     )   ) |>    summarise(     mean_absolute_percentage_error = mean(       absolute_percentage_error     )   ) |>    pull(mean_absolute_percentage_error)  print(mape) #> [1] 0.05386989 mae <- observed_incompletes |>    left_join(     estimated_incompletes,     by = join_by(       period_id, months_waited_id     )   ) |>    mutate(     absolute_error = abs(       predicted - observed     )   ) |>    summarise(     mean_absolute_error = mean(       absolute_error     )   ) |>    pull(mean_absolute_error)  print(mae) #> [1] 766.6082"},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/articles/rtt-pipeline.html","id":"future-scenarios","dir":"Articles","previous_headings":"","what":"Future scenarios","title":"Creating and validating a model","text":"section describes apply parameters different future scenarios. process identical validation process, without evaluation step (predicting time period unknown data). three scenarios : referrals increasing 5% capacity reducing 5% compared equivalent months previous year referrals decreasing 5% capacity increasing 5% compared equivalent months previous year using timeseries method (TBATS) forecast referrals capacity timeseries data, using tbats, want slightly longer dataset available, first download extra six months data append onto start existing dataset, data manipulation prior forecasting. give us two years total.  scenario, data passed apply_params_to_projections() function appended . sample projection data: sample projections object. need attach date onto data help visualising : data can now appended observed incomplete pathways data visualise incomplete pathways change number months waited projection period:  additional ways visualising wait times proved effective, please see vignette.","code":"## Scenario 1 data   # move the date forward a year and uplift referrals and lower the completed # pathways; then filter for the dates of interest scenario_1 <- monthly_rtt |>    mutate(     period = period %m+% months(12),     value = case_when(       type == \"Referrals\" ~ value * 1.05,       type == \"Complete\" ~ value * 0.95,       .default = value     )   ) |>    filter(     between(       period,       prediction_start,       prediction_end     )   )  # scenario 1 referrals  scenario_1_referrals <- scenario_1 |>   filter(     type == \"Referrals\",     period_id != min(period_id)   ) |>   arrange(     period_id   ) |>    pull(     value   )  scenario_1_capacity <- scenario_1 |>   filter(     type == \"Complete\",     period_id != min(period_id)   ) |>    summarise(     count = sum(value),     .by = period_id   ) |>   arrange(     period_id   ) |>    pull(     count   )  scenario_1_incompletes_at_t0 <- scenario_1 |>   filter(     type == \"Incomplete\",     period_id == min(period_id)   ) |>   distinct(     months_waited_id,     value   ) |>   rename(     incompletes = \"value\"   )   ## Scenario 2  # move the date forward a year, uplift completed pathways and lower the # referrals; then filter for the dates of interest  scenario_2 <- monthly_rtt |>    mutate(     period = period %m+% months(12),     value = case_when(       type == \"Complete\" ~ value * 1.05,       type == \"Referrals\" ~ value * 0.95,       .default = value     )   ) |>    filter(     between(       period,       prediction_start,       prediction_end     )   )  scenario_2_referrals <- scenario_2 |>   filter(     type == \"Referrals\",     period_id != min(period_id)   ) |>   arrange(     period_id   ) |>    pull(     value   )  scenario_2_capacity <- scenario_2 |>   filter(     type == \"Complete\",     period_id != min(period_id)   ) |>    summarise(     count = sum(value),     .by = period_id   ) |>   arrange(     period_id   ) |>    pull(     count   )  scenario_2_incompletes_at_t0 <- scenario_2 |>   filter(     type == \"Incomplete\",     period_id == min(period_id)   ) |>   distinct(     months_waited_id,     value   ) |>   rename(     incompletes = \"value\"   ) # obtain and manipulate tbats data additional_start <- calibration_start %m-% months(6) additional_end <- calibration_start - 1   # each metric must be downloaded separately additional_monthly_rtt <- NHSRtt::get_rtt_data(   date_start = additional_start,   date_end = additional_end,   trust_codes = analysis_trust ) |>    mutate(     months_waited_id = convert_months_waited_to_id(       months_waited,       max_months_waited     )   ) |>   summarise(     value = sum(value),     .by = c(       trust,       period,       type,       months_waited_id     )   ) |>    arrange(     type,     months_waited_id,     period   ) |>    mutate(     # here we relate the period_id to the period_id in the monthly_rtt data     # which we will apend this additional data to     period_id = (lubridate::interval(       min(monthly_rtt$period), period     ) %/% months(1)) + 1   )  tbats_monthly_rtt <- bind_rows(   additional_monthly_rtt,   monthly_rtt ) |>    arrange(     type, months_waited_id, period   )  ## Scenario 3  forecast_function <- function(rtt_table, number_timesteps) {   fcast <- rtt_table |>      pull(value) |>      ts(frequency = 12) |>      forecast::tbats() |>      forecast::forecast(h = number_timesteps) |>      tidyr::as_tibble() |>      pull(`Point Forecast`)      return(fcast) }  scenario_3_referrals <- tbats_monthly_rtt |>    filter(     type == \"Referrals\"   ) |>    forecast_function(     number_timesteps = 12   ) |>    tail(11)  scenario_3_capacity <-  tbats_monthly_rtt |>    filter(     type == \"Complete\"   ) |>    summarise(     value = sum(value),     .by = period_id   ) |>    forecast_function(     number_timesteps = 12   ) |>    tail(11)  scenario_3_incompletes_at_t0 <- tbats_monthly_rtt |>    filter(     type == \"Incomplete\"   ) |>    group_by(months_waited_id) |>    group_split() |>    lapply(     forecast_function,     number_timesteps = 1   ) |>    unlist() |>    setNames(nm = 0:12) |>    # turn the named vector into a two column tibble   (\\(x) dplyr::tibble(     months_waited_id = as.numeric(names(x)),     incompletes = x   ))() scenario_1_projections <- apply_params_to_projections(   capacity_projections = scenario_1_capacity,   referrals_projections = scenario_1_referrals,   incomplete_pathways = scenario_1_incompletes_at_t0,   renege_capacity_params = params,   max_months_waited = max_months_waited ) |>    mutate(     scenario = \"Scenario 1\"   )  scenario_2_projections <- apply_params_to_projections(   capacity_projections = scenario_2_capacity,   referrals_projections = scenario_2_referrals,   incomplete_pathways = scenario_2_incompletes_at_t0,   renege_capacity_params = params,   max_months_waited = max_months_waited ) |>    mutate(     scenario = \"Scenario 2\"   )  scenario_3_projections <- apply_params_to_projections(   capacity_projections = scenario_3_capacity,   referrals_projections = scenario_3_referrals,   incomplete_pathways = scenario_3_incompletes_at_t0,   renege_capacity_params = params,   max_months_waited = max_months_waited ) |>    mutate(     scenario = \"Scenario 3\"   )  projections <- bind_rows(   scenario_1_projections,   scenario_2_projections,   scenario_3_projections ) |>    select(     \"period_id\",     \"months_waited_id\",     value = \"incompletes\",     \"scenario\"   ) |>    # here we adjust the period_id field to follow on from the latest period_id in   # the validation dataset (because the apply_params_to_projections function   # resets the earliest period_id to 1)   mutate(     # 1 is added to the end because the first period is used for the count of     # incomplete pathways at t=0     period_id = period_id + max(validation_period$period_id) + 1   ) date_lkp <- dplyr::tibble(   period = seq(     # 1 is added to the end because the first period is used for the count of     # incomplete pathways at t=0     from = prediction_start %m+% months(1),     to = prediction_end,     by = \"months\"   ),   period_id = seq(     from = min(projections$period_id),     to = max(projections$period_id),     by = 1   ) )  projections <- projections |>    left_join(     date_lkp,     by = join_by(       period_id     )   ) monthly_rtt |>    filter(     type == \"Incomplete\"   ) |>    select(     \"period\", \"period_id\", \"months_waited_id\", \"value\"   ) |>    mutate(     scenario = \"Observed\"   ) |>    bind_rows(     projections   ) |>    mutate(     scenario = case_when(       scenario == \"Scenario 1\" ~ \"%5 increase referrals\\n5% decrease capacity\",       scenario == \"Scenario 2\" ~ \"%5 increase capacity\\n5% decrease referrals\",       scenario == \"Scenario 3\" ~ \"TBATS\",       .default = scenario     ),     scenario = factor(       scenario,       levels = c(         \"Observed\",         \"%5 increase referrals\\n5% decrease capacity\",         \"%5 increase capacity\\n5% decrease referrals\",         \"TBATS\"       )     ),     months_waited_id = paste(       months_waited_id,       \"months waited\"     ),     months_waited_id = factor(       months_waited_id,       levels = paste(0:12, \"months waited\")     )   ) |>    ggplot(     aes(       x = period,       y = value     )   ) +   geom_line(     aes(       group = interaction(months_waited_id, scenario),       linetype = scenario,       colour = scenario     )   ) +   facet_wrap(     facets = vars(months_waited_id),     scales = \"free_y\",     ncol = 3   ) +   theme_bw() +   theme(     legend.position = \"bottom\"   ) +   labs(     y = \"Incomplete pathways\",     x = \"\",     title = \"Count of incomplete pathways with three future scenarios\"   ) +   scale_colour_manual(     name = \"Scenario\",     values = c(       \"Observed\" = \"black\",       \"%5 increase referrals\\n5% decrease capacity\" = \"#D81B60\",       \"%5 increase capacity\\n5% decrease referrals\" = \"#1E88E5\",       \"TBATS\" = \"#FFC107\"     )   ) +   scale_linetype_manual(     name = \"Scenario\",     values = c(       \"Observed\" = \"solid\",       \"%5 increase referrals\\n5% decrease capacity\" = \"longdash\",       \"%5 increase capacity\\n5% decrease referrals\" = \"longdash\",       \"TBATS\" = \"longdash\"     )   )"},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sebastian Fox. Author, maintainer. Richard Wood. Author. Richard Blackwell. Author.","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Fox S, Wood R, Blackwell R (2025). NHSRtt: Scenario plan future elective scenarios using public NHS data. R package version 0.2.2, https://nhs-bnssg-analytics.github.io/NHSRtt/.","code":"@Manual{,   title = {NHSRtt: Scenario plan for future elective scenarios using public NHS data},   author = {Sebastian Fox and Richard Wood and Richard Blackwell},   year = {2025},   note = {R package version 0.2.2},   url = {https://nhs-bnssg-analytics.github.io/NHSRtt/}, }"},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/index.html","id":"nhsrtt","dir":"","previous_headings":"","what":"Scenario plan for future elective scenarios using public NHS data","title":"Scenario plan for future elective scenarios using public NHS data","text":"goal NHSRtt allow analysts implement simple stock--flow model NHS activity data support analysis future demand capacity scenarios understand NHS waiting times.","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Scenario plan for future elective scenarios using public NHS data","text":"can install development version NHSRtt GitHub : get walkthrough vignette can install package - though take minutes:","code":"# install.packages(\"devtools\") devtools::install_github(\"nhs-bnssg-analytics/NHSRtt\") # install.packages(\"devtools\") devtools::install_github(   \"nhs-bnssg-analytics/NHSRtt\",   build_vignettes = TRUE )"},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/index.html","id":"vignettes","dir":"","previous_headings":"","what":"Vignettes","title":"Scenario plan for future elective scenarios using public NHS data","text":"vignettes also available packages website using Articles drop .","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/NHSRtt.html","id":null,"dir":"Reference","previous_headings":"","what":"NHSRtt: A package for modelling waiting times using a stock and flow method — NHSRtt","title":"NHSRtt: A package for modelling waiting times using a stock and flow method — NHSRtt","text":"NHSRtt: package modelling waiting times using stock flow method","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/apply_parameter_skew.html","id":null,"dir":"Reference","previous_headings":"","what":"Pivot the parameters passed into the function so relationships between the parameters remain consistent but giving control to providing more or less focus on extreme bins — apply_parameter_skew","title":"Pivot the parameters passed into the function so relationships between the parameters remain consistent but giving control to providing more or less focus on extreme bins — apply_parameter_skew","text":"Pivot parameters passed function relationships parameters remain consistent giving control providing less focus extreme bins","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/apply_parameter_skew.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pivot the parameters passed into the function so relationships between the parameters remain consistent but giving control to providing more or less focus on extreme bins — apply_parameter_skew","text":"","code":"apply_parameter_skew(params, skew, skew_method = \"rotate\", pivot_bin = NULL)"},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/apply_parameter_skew.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pivot the parameters passed into the function so relationships between the parameters remain consistent but giving control to providing more or less focus on extreme bins — apply_parameter_skew","text":"params numeric vector parameters; assumed order increasing waiting times (bins) skew numeric; length 1, multiplier used final parameter. skew 1 keep params identical input params. Value must greater 0 skew_method character; one \"rotate\" \"uniform\". \"rotate\" method multiply highest bin skew value, pivot_bin remain input, bins pivot bin highest bin multiplied interpolated value 1 skew value. Bins second bin pivot bin multiplied interpolated value (1 / skew) 1. method \"uniform\", bins greater equal pivot bin multiplied skew value, bins pivot bin multiplied (1 / skew) pivot_bin numeric; applying skew, whichever method, select bin pivot around. NULL, mid-bin highest available bin second bin used. first item parameter inputs bin 0, pivot_bin 2, third item","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/apply_parameter_skew.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pivot the parameters passed into the function so relationships between the parameters remain consistent but giving control to providing more or less focus on extreme bins — apply_parameter_skew","text":"revised numeric vector parameters","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/apply_parameter_skew.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pivot the parameters passed into the function so relationships between the parameters remain consistent but giving control to providing more or less focus on extreme bins — apply_parameter_skew","text":"skew parameter applied final item params   vector. inverse skew parameter applied second item   params vector. adjustment made items item   item n calculated linear extrapolation inverse skew   skew. first item held constant.","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/apply_parameter_skew.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pivot the parameters passed into the function so relationships between the parameters remain consistent but giving control to providing more or less focus on extreme bins — apply_parameter_skew","text":"","code":"apply_parameter_skew(   params = c(0.03, 0.02, 0.02, 0.01, 0.04, 0.05),   skew = 1.05 ) #> [1] 0.03000000 0.01904762 0.01952381 0.01000000 0.04100000 0.05250000"},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/apply_params_to_projections.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply the parameters for renege and capacity (by months waited) to projections of capacity and referrals. If needed, or if validating your parameters, include the observed incomplete pathways by the number of months waited for the period prior to the period being projected (eg, a starting position) — apply_params_to_projections","title":"Apply the parameters for renege and capacity (by months waited) to projections of capacity and referrals. If needed, or if validating your parameters, include the observed incomplete pathways by the number of months waited for the period prior to the period being projected (eg, a starting position) — apply_params_to_projections","text":"Apply parameters renege capacity (months waited) projections capacity referrals. needed, validating parameters, include observed incomplete pathways number months waited period prior period projected (eg, starting position)","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/apply_params_to_projections.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply the parameters for renege and capacity (by months waited) to projections of capacity and referrals. If needed, or if validating your parameters, include the observed incomplete pathways by the number of months waited for the period prior to the period being projected (eg, a starting position) — apply_params_to_projections","text":"","code":"apply_params_to_projections(   capacity_projections,   referrals_projections,   incomplete_pathways = NULL,   renege_capacity_params,   max_months_waited,   surplus_treatment_redistribution_method = \"evenly\" )"},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/apply_params_to_projections.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply the parameters for renege and capacity (by months waited) to projections of capacity and referrals. If needed, or if validating your parameters, include the observed incomplete pathways by the number of months waited for the period prior to the period being projected (eg, a starting position) — apply_params_to_projections","text":"capacity_projections numeric; vector projections capacity time step. must length referrals_projections referrals_projections numeric; vector projections reneges time step. must length capacity_projections incomplete_pathways tibble; two column data frame tibble, fields called months_waited_id (taking values 0 maximum months waited group interest), incompletes (count number incomplete pathways) representing count incomplete pathways timestep 0 (initialise model ) renege_capacity_params tibble; three column data frame tibble, fields called months_waited_id (taking values 0 maximum months waited group interest), fields called capacity_param renege_param, outputs function calibrate_capacity_renege_params() max_months_waited integer; maximum number months group patients waiting times analysis. Data published 104 weeks, 24 likely maximum useful value argument. surplus_treatment_redistribution_method string; one \"none\", \"evenly\" \"prioritise_long_waiters\"; cases counts reneges treatments exceed counts people waiting redistributed, , method used","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/apply_params_to_projections.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply the parameters for renege and capacity (by months waited) to projections of capacity and referrals. If needed, or if validating your parameters, include the observed incomplete pathways by the number of months waited for the period prior to the period being projected (eg, a starting position) — apply_params_to_projections","text":"tibble fields period_id, months_waited_id,   calculated_treatments, reneges, incompletes input_treatments","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/apply_params_to_projections.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply the parameters for renege and capacity (by months waited) to projections of capacity and referrals. If needed, or if validating your parameters, include the observed incomplete pathways by the number of months waited for the period prior to the period being projected (eg, a starting position) — apply_params_to_projections","text":"","code":"max_months <- 4 refs <- create_dummy_data(   type = \"referral\",   max_months_waited = max_months,   number_periods = 6 ) incomp <- create_dummy_data(   type = \"incomplete\",   max_months_waited = max_months,   number_periods = 6 )  comp <- create_dummy_data(   type = \"complete\",   max_months_waited = max_months,   number_periods = 6 )  params <- calibrate_capacity_renege_params(   referrals = refs,   incompletes = incomp,   completes = comp,   max_months_waited = max_months,   redistribute_m0_reneges = TRUE )  set.seed(3) future_capacity <- sample(300:500, 4, replace = TRUE) future_referrals <- sample(300:500, 4, replace = TRUE) incompletes_t0 <- dplyr::tibble(   months_waited_id = c(0, seq_len(max_months)),   incompletes = sample(     100:200,     length(c(0, seq_len(max_months))),     replace = TRUE    ) )  projections <- apply_params_to_projections(   capacity_projections = future_capacity,   referrals_projections = future_referrals,   incomplete_pathways = incompletes_t0,   renege_capacity_params = params,   max_months_waited = max_months )"},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/calculate_incompletes.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the number of incomplete pathways in a bin from the inflow, reneges and treatments. Following the calculations, apply an optional redistribution of the occasions where incompletes are negative (eg, more treatments have been performed than there were people). — calculate_incompletes","title":"Calculate the number of incomplete pathways in a bin from the inflow, reneges and treatments. Following the calculations, apply an optional redistribution of the occasions where incompletes are negative (eg, more treatments have been performed than there were people). — calculate_incompletes","text":"Calculate number incomplete pathways bin inflow, reneges treatments. Following calculations, apply optional redistribution occasions incompletes negative (eg, treatments performed people).","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/calculate_incompletes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the number of incomplete pathways in a bin from the inflow, reneges and treatments. Following the calculations, apply an optional redistribution of the occasions where incompletes are negative (eg, more treatments have been performed than there were people). — calculate_incompletes","text":"","code":"calculate_incompletes(inflow, reneges, treatments, redistribution_method)"},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/calculate_incompletes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the number of incomplete pathways in a bin from the inflow, reneges and treatments. Following the calculations, apply an optional redistribution of the occasions where incompletes are negative (eg, more treatments have been performed than there were people). — calculate_incompletes","text":"inflow numeric; vector count patients moving bin period order lowest highest bin reneges numeric; vector count patients reneging bin period order lowest highest bin treatments numeric; vector count patients treated bin period order lowest highest bin redistribution_method string; one \"none\", \"evenly\" \"prioritise_long_waiters\"","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/calculate_timestep_transitions.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the flow from each stock at each timestep — calculate_timestep_transitions","title":"Calculates the flow from each stock at each timestep — calculate_timestep_transitions","text":"Calculates flow stock timestep","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/calculate_timestep_transitions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the flow from each stock at each timestep — calculate_timestep_transitions","text":"","code":"calculate_timestep_transitions(   referrals,   incompletes,   completes,   max_months_waited )"},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/calculate_timestep_transitions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the flow from each stock at each timestep — calculate_timestep_transitions","text":"referrals data frame two columns; period_id referrals. represents count referrals period incompletes data three columns; period_id, months_waited_id, incompletes. represents count incomplete pathways number months waited period completes data three columns; period_id, months_waited_id, treatments. represents count completed pathways number months waited period max_months_waited integer; maximum number months group patients waiting times analysis. Data published 104 weeks, 24 likely maximum useful value argument","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/calculate_timestep_transitions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the flow from each stock at each timestep — calculate_timestep_transitions","text":"tibble fields months_waited_id, period_id, node_inflow,   waiting_same_node treatments. represent counts   moved single time step","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/calculate_timestep_transitions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates the flow from each stock at each timestep — calculate_timestep_transitions","text":"timestep, stock calculated current count patients waiting timestep plus inflow (via referrals incomplete pathways previous timestep) minus outflow (pathways completed reneges, deduced flows). stock divided \"months waited\", patients incomplete pathways end timestep incremented additional month's waiting time data frames supplied, period_id months_waited_id fields numeric/integers. period_id integer representing chronology data, months_waited_id numeric representation months waited, 0 represents 0 1 month, 5 represents 5 6 months.","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/calibrate_capacity_renege_params.html","id":null,"dir":"Reference","previous_headings":"","what":"calculate the capacity and renege parameters over the period of data per month waited — calibrate_capacity_renege_params","title":"calculate the capacity and renege parameters over the period of data per month waited — calibrate_capacity_renege_params","text":"calculate capacity renege parameters period data per month waited","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/calibrate_capacity_renege_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calculate the capacity and renege parameters over the period of data per month waited — calibrate_capacity_renege_params","text":"","code":"calibrate_capacity_renege_params(   referrals,   incompletes,   completes,   max_months_waited = 12,   redistribute_m0_reneges,   full_breakdown = FALSE )"},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/calibrate_capacity_renege_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calculate the capacity and renege parameters over the period of data per month waited — calibrate_capacity_renege_params","text":"referrals data frame two columns; period_id referrals. represents count referrals period incompletes data three columns; period_id, months_waited_id, incompletes. represents count incomplete pathways number months waited period completes data three columns; period_id, months_waited_id, treatments. represents count completed pathways number months waited period max_months_waited integer; maximum number months group patients waiting times analysis. Data published 104 weeks, 24 likely maximum useful value argument. redistribute_m0_reneges logical; negative renege counts zero months waited stock reassigned referrals? full_breakdown logical; include full breakdown monthly transitions period. FALSE provides parameters months_waited_id ","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/calibrate_capacity_renege_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"calculate the capacity and renege parameters over the period of data per month waited — calibrate_capacity_renege_params","text":"","code":"max_months <- 4 refs <- create_dummy_data(   type = \"referral\",   max_months_waited = max_months,   number_periods = 6 ) incomp <- create_dummy_data(   type = \"incomplete\",   max_months_waited = max_months,   number_periods = 6 )  comp <- create_dummy_data(   type = \"complete\",   max_months_waited = max_months,   number_periods = 6 )  params <- calibrate_capacity_renege_params(   referrals = refs,   incompletes = incomp,   completes = comp,   max_months_waited = max_months,   redistribute_m0_reneges = TRUE )"},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/convert_months_waited_to_id.html","id":null,"dir":"Reference","previous_headings":"","what":"convert the string version of months waited to the numeric id version — convert_months_waited_to_id","title":"convert the string version of months waited to the numeric id version — convert_months_waited_to_id","text":"convert string version months waited numeric id version","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/convert_months_waited_to_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert the string version of months waited to the numeric id version — convert_months_waited_to_id","text":"","code":"convert_months_waited_to_id(months_waited, max_months_waited)"},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/convert_months_waited_to_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convert the string version of months waited to the numeric id version — convert_months_waited_to_id","text":"months_waited string; vector format, example \"2-3\" max_months_waited integer; maximum number months group patients waiting times analysis. Data published 104 weeks, 24 likely maximum useful value argument.","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/convert_months_waited_to_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"convert the string version of months waited to the numeric id version — convert_months_waited_to_id","text":"","code":"mnths_waited <- c(\"<1\", \"1-2\", \"2-3\", \"3-4\", \"4-5\", \"5+\") convert_months_waited_to_id(   months_waited = mnths_waited,   max_months_waited = 3 ) #> [1] 0 1 2 3 3 3"},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/create_dummy_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a set of dummy data to put through the functions of the package — create_dummy_data","title":"Create a set of dummy data to put through the functions of the package — create_dummy_data","text":"Create set dummy data put functions package","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/create_dummy_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a set of dummy data to put through the functions of the package — create_dummy_data","text":"","code":"create_dummy_data(   type,   max_months_waited,   number_periods,   referral_values = 9000:12000,   max_incompletes = 10000,   max_treatments = 500,   seed = 123 )"},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/create_dummy_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a set of dummy data to put through the functions of the package — create_dummy_data","text":"type string; one \"referral\", \"incomplete\" \"complete\" max_months_waited integer; maximum number months group patients waiting times analysis. Data published 104 weeks, 24 likely maximum useful value argument. number_periods integer; intended number periods dataset referral_values integer; vector values sampled count referrals time step max_incompletes integer; maximum number incomplete pathways possible one time step max_treatments integer; maximum number treatments possible seed seed generate random data ","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/create_dummy_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a set of dummy data to put through the functions of the package — create_dummy_data","text":"tibble whose columns depend type input. type   \"referral\" two fields, period_id referrals. type   \"complete\" \"incomplete\", fields period_id,   months_waited_id treatments/incompletes, depending type value","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/create_dummy_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a set of dummy data to put through the functions of the package — create_dummy_data","text":"","code":"create_dummy_data(   type = \"referral\",   max_months_waited = 4,   number_period = 6 ) #> # A tibble: 7 × 2 #>   period_id referrals #>       <dbl>     <int> #> 1         0     11462 #> 2         1     11510 #> 3         2     11226 #> 4         3      9525 #> 5         4      9194 #> 6         5     11985 #> 7         6     10841"},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/get_rtt_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Download and tidy the referral to treatment data from the NHS Statistics webpage — get_rtt_data","title":"Download and tidy the referral to treatment data from the NHS Statistics webpage — get_rtt_data","text":"Download tidy referral treatment data NHS Statistics webpage","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/get_rtt_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download and tidy the referral to treatment data from the NHS Statistics webpage — get_rtt_data","text":"","code":"get_rtt_data(   url = \"https://www.england.nhs.uk/statistics/statistical-work-areas/rtt-waiting-times/\",   date_start = as.Date(\"2019-04-01\"),   date_end = Sys.Date(),   trust_parent_codes = NULL,   commissioner_parent_codes = NULL,   commissioner_org_codes = NULL,   trust_codes = NULL,   specialty_codes = NULL,   show_progress = FALSE )"},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/get_rtt_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download and tidy the referral to treatment data from the NHS Statistics webpage — get_rtt_data","text":"url string; url NHS Referral Treatment (RTT) Waiting Times date_start date; start date (earliest date 1st April 2016, default 1st April 2019) date_end date; end date (defaults \"today\") trust_parent_codes character; vector trust parent codes filter (optional); eg \"QE1\" NHS Lancashire South Cumbria Integrated Care Board commissioner_parent_codes character; vector commissioner parent codes filter (optional); eg \"QF7\" NHS South Yorkshire Integrated Care Board commissioner_org_codes character; vector commissioner org codes filter (optional); eg \"15C\" NHS Bristol, North Somerset South Gloucestershire (sub-ICB location) trust_codes character; vector trust codes filter (optional); eg \"R1A\"  Herefordshire Worcestershire Health Care NHS Trust specialty_codes character; vector specialty codes filter (optional); eg \"C_999\" \"Total\" specialties show_progress logical; show progress downloading processing files. Defaults false","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/get_rtt_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download and tidy the referral to treatment data from the NHS Statistics webpage — get_rtt_data","text":"tibble fields trust_parent_org_code,   commissioner_parent_org_code, commissioner_org_code, trust, specialty,   period, type, months_waited value","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/get_rtt_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download and tidy the referral to treatment data from the NHS Statistics webpage — get_rtt_data","text":"","code":"if (FALSE) { # \\dontrun{ monthly_rtt <- NHSRtt::get_rtt_data(   type = \"complete\",   date_start = as.Date(\"2024-10-01\"),   date_end = as.Date(\"2024-11-01\"),   show_progress = TRUE ) } # }"},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/latest_rtt_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns the date of the latest available data — latest_rtt_date","title":"Returns the date of the latest available data — latest_rtt_date","text":"Returns date latest available data","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/latest_rtt_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns the date of the latest available data — latest_rtt_date","text":"","code":"latest_rtt_date(   url = \"https://www.england.nhs.uk/statistics/statistical-work-areas/rtt-waiting-times/\" )"},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/latest_rtt_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns the date of the latest available data — latest_rtt_date","text":"url string; url NHS Referral Treatment (RTT) Waiting Times","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/latest_rtt_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns the date of the latest available data — latest_rtt_date","text":"latest date available data","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/latest_rtt_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns the date of the latest available data — latest_rtt_date","text":"","code":"latest_rtt_date() #> [1] \"2024-12-31\""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/month_attribution_lkp.html","id":null,"dir":"Reference","previous_headings":"","what":"creates table of weights to apply to dates that represent the end of a week. These weights correspond tot he proportion of that week's counts that fall into the month that the ","title":"creates table of weights to apply to dates that represent the end of a week. These weights correspond tot he proportion of that week's counts that fall into the month that the ","text":"rtt data published monthly represents snapshot   counts end given month. weekly counts provided within   data. convert weekly counts monthly counts must sum   weekly counts within month. weeks fall month ends,   function identifies , calculates number days   weeks fall within month. days used calculate   weighting, output function.","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/month_attribution_lkp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"creates table of weights to apply to dates that represent the end of a week. These weights correspond tot he proportion of that week's counts that fall into the month that the ","text":"","code":"month_attribution_lkp(week_end_dates)"},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/month_attribution_lkp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"creates table of weights to apply to dates that represent the end of a week. These weights correspond tot he proportion of that week's counts that fall into the month that the ","text":"week_end_dates vector dates represent final date week consideration (specific day week reference point purpose end month can fall day week)","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/month_attribution_lkp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"creates table of weights to apply to dates that represent the end of a week. These weights correspond tot he proportion of that week's counts that fall into the month that the ","text":"tibble week_end, wait_start_month, month_weight week_end   dates provided, wait_start_month start month   waiting period began, month_weight value 0   1 apply counts within week","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/obtain_links.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify links within a given url — obtain_links","title":"Identify links within a given url — obtain_links","text":"Identify links within given url","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/obtain_links.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify links within a given url — obtain_links","text":"","code":"obtain_links(url)"},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/obtain_links.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify links within a given url — obtain_links","text":"url string; url interest identify urls within","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/obtain_links.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify links within a given url — obtain_links","text":"named vector urls linked within provided url","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/optimise_capacity.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimise the capacity profile for projections — optimise_capacity","title":"Optimise the capacity profile for projections — optimise_capacity","text":"Optimise capacity profile projections","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/optimise_capacity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimise the capacity profile for projections — optimise_capacity","text":"","code":"optimise_capacity(   t_1_capacity,   referrals_projections,   incomplete_pathways,   renege_capacity_params,   target,   target_bin,   capacity_profile = \"linear_change\",   surplus_treatment_redistribution_method = \"evenly\",   tolerance,   max_iterations = 50 )"},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/optimise_capacity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimise the capacity profile for projections — optimise_capacity","text":"t_1_capacity numeric; single value capacity first time period referrals_projections numeric; vector number referrals period projected time period incomplete_pathways tibble; two column data frame tibble, fields called months_waited_id (taking values 0 maximum months waited group interest), incompletes (count number incomplete pathways) representing count incomplete pathways timestep 0 (initialise model ) renege_capacity_params tibble; three column data frame tibble, fields called months_waited_id (taking values 0 maximum months waited group interest), fields called capacity_param renege_param, outputs function calibrate_capacity_renege_params() target string length 1; can either percentage point change, eg, \"~-5%\" percent value, eg, \"5%\" target_bin numeric length 1; bin target refers . must less equal max_months_waited value capacity_profile string, one \"linear_change\" \"flat\"; determines capacity counts vary future. Linear change means first point held stationary end point varied, linear interpolation two points. Flat means capacity remains constant future surplus_treatment_redistribution_method string; one \"none\", \"evenly\" \"prioritise_long_waiters\"; cases counts reneges treatments exceed counts people waiting redistributed, , method used tolerance numeric length 1; tolerance used compare absolute error max_months_waited bin determine convergence. absolute error calculated proportion max_months_waited bin relative total waiting (even non-percentage target used) max_iterations numeric; maximum number iterations test convergence providing warning invalid number","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/optimise_capacity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimise the capacity profile for projections — optimise_capacity","text":"capacity multiplier representing annual change capacity   (input t_1_capacity capacity t = 13) achieve   desired target within target tolerance. name returned object   provides indication whether optimiser converged","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/redistribute_incompletes_evenly.html","id":null,"dir":"Reference","previous_headings":"","what":"Redistribute cases where there are more treatments and reneges than people in a particular bin for a particular period. This function chooses the redistribute the surplus treatment to the people waiting the longest first — redistribute_incompletes_evenly","title":"Redistribute cases where there are more treatments and reneges than people in a particular bin for a particular period. This function chooses the redistribute the surplus treatment to the people waiting the longest first — redistribute_incompletes_evenly","text":"Redistribute cases treatments reneges people particular bin particular period. function chooses redistribute surplus treatment people waiting longest first","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/redistribute_incompletes_evenly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Redistribute cases where there are more treatments and reneges than people in a particular bin for a particular period. This function chooses the redistribute the surplus treatment to the people waiting the longest first — redistribute_incompletes_evenly","text":"","code":"redistribute_incompletes_evenly(incomplete_counts)"},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/redistribute_incompletes_evenly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Redistribute cases where there are more treatments and reneges than people in a particular bin for a particular period. This function chooses the redistribute the surplus treatment to the people waiting the longest first — redistribute_incompletes_evenly","text":"incomplete_counts numeric; vector incomplete counts bin period","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/redistribute_incompletes_optimally.html","id":null,"dir":"Reference","previous_headings":"","what":"Redistribute cases where there are more treatments and reneges than people in a particular bin for a particular period. This function chooses the redistribute the surplus treatment to the people waiting the longest first — redistribute_incompletes_optimally","title":"Redistribute cases where there are more treatments and reneges than people in a particular bin for a particular period. This function chooses the redistribute the surplus treatment to the people waiting the longest first — redistribute_incompletes_optimally","text":"Redistribute cases treatments reneges people particular bin particular period. function chooses redistribute surplus treatment people waiting longest first","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/redistribute_incompletes_optimally.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Redistribute cases where there are more treatments and reneges than people in a particular bin for a particular period. This function chooses the redistribute the surplus treatment to the people waiting the longest first — redistribute_incompletes_optimally","text":"","code":"redistribute_incompletes_optimally(incomplete_counts)"},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/redistribute_incompletes_optimally.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Redistribute cases where there are more treatments and reneges than people in a particular bin for a particular period. This function chooses the redistribute the surplus treatment to the people waiting the longest first — redistribute_incompletes_optimally","text":"incomplete_counts numeric; vector count patients incomplete pathway within bin period order lowest highest bin","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/tidy_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in and tidy the csv file — tidy_file","title":"Read in and tidy the csv file — tidy_file","text":"Read tidy csv file","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/tidy_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in and tidy the csv file — tidy_file","text":"","code":"tidy_file(   csv_filepath,   trust_parent_codes = NULL,   commissioner_parent_codes = NULL,   commissioner_org_codes = NULL,   trust_codes = NULL,   specialty_codes = NULL )"},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/tidy_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in and tidy the csv file — tidy_file","text":"csv_filepath string; file path file location trust_parent_codes character; vector trust parent codes filter (optional); eg \"QE1\" NHS Lancashire South Cumbria Integrated Care Board commissioner_parent_codes character; vector commissioner parent codes filter (optional); eg \"QF7\" NHS South Yorkshire Integrated Care Board commissioner_org_codes character; vector commissioner org codes filter (optional); eg \"15C\" NHS Bristol, North Somerset South Gloucestershire (sub-ICB location) trust_codes character; vector trust codes filter (optional); eg \"R1A\"  Herefordshire Worcestershire Health Care NHS Trust specialty_codes character; vector specialty codes filter (optional); eg \"C_999\" \"Total\" specialties","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/reference/tidy_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read in and tidy the csv file — tidy_file","text":"tidy tibble","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/news/index.html","id":"nhsrtt-022","dir":"Changelog","previous_headings":"","what":"NHSRtt 0.2.2","title":"NHSRtt 0.2.2","text":"exports skew parameter function allows specification pivoting happens skew parameter skew function provides two different skew methods adds latest_rtt_date() data import works months historic data","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/news/index.html","id":"nhsrtt-021","dir":"Changelog","previous_headings":"","what":"NHSRtt 0.2.1","title":"NHSRtt 0.2.1","text":"Data import specialty code bug fix","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/news/index.html","id":"nhsrtt-020","dir":"Changelog","previous_headings":"","what":"NHSRtt 0.2.0","title":"NHSRtt 0.2.0","text":"data import now includes commissioner information get_rtt_data() stops using type input argument data returned one call","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/news/index.html","id":"nhsrtt-015","dir":"Changelog","previous_headings":"","what":"NHSRtt 0.1.5","title":"NHSRtt 0.1.5","text":"includes non-admitted data get_rtt_data accidentally excluded","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/news/index.html","id":"nhsrtt-014","dir":"Changelog","previous_headings":"","what":"NHSRtt 0.1.4","title":"NHSRtt 0.1.4","text":"bug fixes edge case management allows surplus capacity allocated longest waiters rather spreading evenly","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/news/index.html","id":"nhsrtt-013","dir":"Changelog","previous_headings":"","what":"NHSRtt 0.1.3","title":"NHSRtt 0.1.3","text":"includes optimiser function","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/news/index.html","id":"nhsrtt-012","dir":"Changelog","previous_headings":"","what":"NHSRtt 0.1.2","title":"NHSRtt 0.1.2","text":"fixes calibration period bug first period removed unintentionally","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/news/index.html","id":"nhsrtt-011","dir":"Changelog","previous_headings":"","what":"NHSRtt 0.1.1","title":"NHSRtt 0.1.1","text":"improves vignettes","code":""},{"path":"https://nhs-bnssg-analytics.github.io/NHSRtt/news/index.html","id":"nhsrtt-010","dir":"Changelog","previous_headings":"","what":"NHSRtt 0.1.0","title":"NHSRtt 0.1.0","text":"first release testing collaborators","code":""}]
